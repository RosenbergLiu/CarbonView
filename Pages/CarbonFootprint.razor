@page "/footprint"

<PageTitle>Carbon Footprint</PageTitle>
<RadzenText Text="Carbon Footprint" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin-bottom: 2rem" />
<RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible" AllowClose="false">@errorMessage</RadzenAlert>
<RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Visible="@busy" />
<RadzenDropDown TValue="string" Value=@selectedYear Data=@yearsStr Change="@(args => UpdateChart(args.ToString()))" Style="width: 100%; max-width: 100%;" Visible="@(!errorVisible)"/>
<RadzenChart Style="height: 28rem" Visible="@(!errorVisible)">
    <RadzenPieSeries Data="@data" Title="CO2 Emission" CategoryProperty="Category" ValueProperty="Value">
        <RadzenSeriesDataLabels Visible="false" />
    </RadzenPieSeries>
    <RadzenLegend Position="LegendPosition.Bottom" />
</RadzenChart>

<RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.ExtraSmall" AlertStyle="AlertStyle.Light" Visible="@tipVisible" AllowClose="true" Style="margin-top: 2rem">@tipMessage</RadzenAlert>


@code {
    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    [Inject]
    protected NavigationManager NavigationManager { get; set; }

    [Inject]
    protected DialogService DialogService { get; set; }

    [Inject]
    protected TooltipService TooltipService { get; set; }

    [Inject]
    protected ContextMenuService ContextMenuService { get; set; }

    [Inject]
    protected NotificationService NotificationService { get; set; }

    [Inject]
    public ActivitiesDBService activitiesDBService { get; set; }

    [Inject]
    public NavigationManager navigation { get; set; }

    [Inject]
    public SystemDBService sysDBService { get; set; }

    string errorMessage = "";
    bool errorVisible = false;
    bool busy = false;
    string tipMessage;
    bool tipVisible;

    IEnumerable<string> yearsStr;
    string selectedYear;

    int members;

    List<ActivityRecord> activities = new List<ActivityRecord>();

    protected override async Task OnInitializedAsync()
    {
        if (!Preferences.Default.Get("loggedin", false))
        {
            navigation.NavigateTo("/login");
        }
        busy = true;

        tipMessage = await sysDBService.GetRandomTip();
        tipVisible = true;

        activities = new List<ActivityRecord>();
        activities = await activitiesDBService.GetActivityRecordsAsync(false);

        if (activities.Count > 0)
        {
            var years = activities.Select(a => a.Year);
            selectedYear = years.Max().ToString();
            yearsStr = activities.OrderByDescending(a => a.Year).Select(a => a.YearStr);

            members = Preferences.Default.Get("members", 1);

            UpdateChart(selectedYear);
        }
        else
        {
            errorMessage = "No data";
            errorVisible = true;
        }
        busy = false;

        StateHasChanged();
    }

    class DataItem
    {
        public string Category { get; set; }
        public double? Value { get; set; }
    }

    DataItem[] data;

    void UpdateChart(string selectedValue)
    {
        busy = true;
        var selectedYearData = activities.Where(a => a.YearStr == selectedValue).FirstOrDefault();
        data = new DataItem[]
        {
            new DataItem
            {
                Category = "Beef",
                Value = selectedYearData.BeefEmission
            },
            new DataItem
            {
                Category = "Lamp",
                Value = selectedYearData.LampEmission
            },
            new DataItem
            {
                Category = "Pork",
                Value = selectedYearData.PorkEmission
            },
            new DataItem
            {
                Category = "Poultry",
                Value = selectedYearData.PoultryEmission
            },
            new DataItem
            {
                Category = "OliverOil",
                Value = selectedYearData.OliverOilEmission
            },
            new DataItem
            {
                Category = "Coffee",
                Value = selectedYearData.CoffeeEmission
            },
            new DataItem
            {
                Category = "Cheese",
                Value = selectedYearData.CheeseEmission
            },
            new DataItem
            {
                Category = "Chocolate",
                Value = selectedYearData.ChocolateEmission
            },
            new DataItem
            {
                Category = "Rice",
                Value = selectedYearData.RiceEmission
            },
            new DataItem
            {
                Category = "Milk",
                Value = selectedYearData.MilkEmission
            },
            new DataItem
            {
                Category = "Eggs",
                Value = selectedYearData.EggsEmission
            },
        };

        busy = false;
    }
}
