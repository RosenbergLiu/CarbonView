@page "/"

<PageTitle>Compare</PageTitle>
<RadzenText Text="Comapre" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
<RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible" AllowClose="false">@errorMessage</RadzenAlert>

<div class="rz-m-12">
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Visible="@busy" />
</div>
<RadzenChart Visible="@electricityChartVisible" >
    <h4>Electricity usage per person (kWh)</h4>
    <RadzenColumnSeries Data="@bills" CategoryProperty="YearStr" ValueProperty="ElectricityUsagePc" Title="My data" />
    <RadzenLineSeries Smooth="false" Data="@electricityRes" CategoryProperty="YearStr" Title="Community data" LineType="LineType.Dashed" ValueProperty="AveKwhPcPa">
        <RadzenMarkers MarkerType="MarkerType.Square" />
    </RadzenLineSeries>
    <RadzenLegend Position="LegendPosition.Bottom" />
    <RadzenValueAxis Min="0" />
</RadzenChart>
<RadzenChart Visible="@gasChartVisible" >
    <h4 style="margin-top: 2rem">Gas usage per person (MJ)</h4>
    <RadzenColumnSeries Data="@bills" CategoryProperty="YearStr" ValueProperty="GasUsage" Title="My data" />
    <RadzenLineSeries Smooth="false" Data="@gasRes" CategoryProperty="YearStr" Title="Community data" LineType="LineType.Dashed" ValueProperty="AveMjPcPa">
        <RadzenMarkers MarkerType="MarkerType.Square" />
    </RadzenLineSeries>
    <RadzenLegend Position="LegendPosition.Bottom" />
    <RadzenValueAxis Min="0" />
</RadzenChart>

<RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Light" Visible="@tipVisible" AllowClose="true">@tipMessage</RadzenAlert>


@code{
    [Inject]
    public ApiService apiService { get; set; }

    [Inject]
    public BillsDBService billsDBService { get; set; }

    [Inject]
    public NavigationManager navigation { get; set; }

    [Inject]
    public SystemDBService sysDBService { get; set; }

    List<CityOfCaseyFieldRes> electricityRes = new List<CityOfCaseyFieldRes>();
    List<CityOfCaseyFieldRes> gasRes = new List<CityOfCaseyFieldRes>();
    List<BillRecord> bills = new List<BillRecord>();
    string errorMessage = "";
    bool errorVisible = false;
    bool electricityChartVisible = false;
    bool gasChartVisible = false;
    bool busy = false;
    string tipMessage;
    bool tipVisible;


    NetworkAccess accessType = Connectivity.Current.NetworkAccess;

    int members;

    protected override async Task OnInitializedAsync()
    {
        if (!Preferences.Default.Get("loggedin", false))
        {
            navigation.NavigateTo("/login");
        }
        busy = true;

        tipMessage = await sysDBService.GetRandomTip();
        tipVisible = true;

        members = Preferences.Default.Get("members", 1);
        bills = new List<BillRecord>();
        bills = await billsDBService.GetBillRecordsAsync(false);
        bills.ForEach(record => record.ElectricityUsagePc = record.ElectricityUsage / members);
        bills.ForEach(record => record.GasUsagePc = record.GasUsage / members);

        List<CityOfCaseyRecordRes> res = new List<CityOfCaseyRecordRes>();
        string postcode = Preferences.Default.Get("postcode", "Undefined postcode");
        if(postcode != "Undefined postcode")
        {
            if (accessType == NetworkAccess.Internet)
            {
                res = await apiService.GetData(postcode);
            }
            else
            {
                errorMessage = "No network connection. Community data is unavailable";
                errorVisible = true;
            }
        }
        else
        {
            errorMessage = "Postcode not set. Community data will not show";
            errorVisible = true;
        }
        var fields = res.Select(r => r.Fields).ToList();
        electricityRes = fields.Where(f => f.Type == "Electricity").OrderBy(f => f.Year).ToList();
        gasRes = fields.Where(f => f.Type == "Gas").OrderBy(f => f.Year).ToList();
        if (bills.Count > 0)
        {
            electricityChartVisible = true;
            gasChartVisible = true;
        }
        else
        {
            errorMessage = "No data";
            errorVisible = true;
        }
        busy = false;

        StateHasChanged();
    }

    async void Refresh()
    {
        await OnInitializedAsync();
    }
}