@page "/bills"

<PageTitle>Bills</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenText Text="My Bills" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H1" style="margin: 0" >
            <a style="text-decoration: underline;" @onclick="visulizationClicked">Click me</a> to see the visualization
        </RadzenText>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid0" ColumnWidth="200px" AllowFiltering="false" FilterMode="FilterMode.Advanced" AllowPaging="false" AllowSorting="true" ShowPagingSummary="true"
                            Data="@records" Count=count LoadData=@Grid0LoadData TItem="BillRecord" RowSelect="@EditRow" AllowGrouping="false" AllowCompositeDataCells="false" AllowColumnResize="false" AllowColumnReorder="false" AllowColumnPicking="false" AllowAlternatingRows="false">
                <Columns>
                    <RadzenDataGridColumn TItem="BillRecord" Property="Year" Title="Bill Records">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="BillRecord" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                        <Template Context="BillRecord">

                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter" Variant="Variant.Flat"
                                          Click=@(args => GridDeleteButtonClick(args, BillRecord)) @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

<RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Light" Visible="@tipVisible" AllowClose="true" Style="margin-top: 2rem">@tipMessage</RadzenAlert>



@code {
    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    [Inject]
    protected DialogService DialogService { get; set; }

    [Inject]
    protected TooltipService TooltipService { get; set; }

    [Inject]
    protected ContextMenuService ContextMenuService { get; set; }

    [Inject]
    protected NotificationService NotificationService { get; set; }

    [Inject]
    public BillsDBService billsDBService { get; set; }

    [Inject]
    public SystemDBService sysDBService { get; set; }

    [Inject]
    public NavigationManager navigation { get; set; }

    protected IEnumerable<BillRecord> records;

    protected RadzenDataGrid<BillRecord> grid0;
    protected int count;

    string tipMessage;
    bool tipVisible;

    protected override async void OnInitialized()
    {
        if (!Preferences.Default.Get("loggedin", false))
        {
            navigation.NavigateTo("/login");
        }

        tipMessage = await sysDBService.GetRandomTip();
        tipVisible = true;
        StateHasChanged();
    }

    protected async Task Grid0LoadData(LoadDataArgs args)
    {
        try
        {
            records = await billsDBService.GetBillRecordsAsync(true);
            count = records.Count();
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = $"Error", Detail = $"Unable to load bills. {ex.Message}" });
        }
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddBill>("Add Record", null);
        await grid0.Reload();
    }

    protected async Task EditRow(BillRecord args)
    {
        await DialogService.OpenAsync<EditBill>("Edit Record", new Dictionary<string, object> { { "Year", args.Year } });
        await grid0.Reload();
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, BillRecord billRecord)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                string deleteResult = await billsDBService.DeletetBillRecordAsync(billRecord);

                if (deleteResult == "OK")
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = ex.Message
                });
        }
    }

    void visulizationClicked()
    {
        navigation.NavigateTo("/");
    }
}
